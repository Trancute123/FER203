import React, { useState, useMemo } from "react";
import { Row, Col, Pagination } from "react-bootstrap"; 
import RecipeCard from "./RecipeCard";     
import RecipeModal from "./RecipeModal";  
import Filters from "./Filters";          

export default function RecipeGrid({
  items,              // Danh s√°ch t·∫•t c·∫£ c√¥ng th·ª©c m√≥n ƒÉn
  onAddToFavorites,   // H√†m callback khi th√™m v√†o y√™u th√≠ch
  onAddToCart,        // H√†m callback khi th√™m v√†o gi·ªè h√†ng
  pageSize,           // S·ªë m√≥n hi·ªÉn th·ªã tr√™n 1 trang
  setPageSize         // H√†m thay ƒë·ªïi s·ªë m√≥n tr√™n 1 trang (truy·ªÅn t·ª´ component cha)
}) {
  // State l∆∞u c√¥ng th·ª©c ƒëang ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ xem chi ti·∫øt
  const [selected, setSelected] = useState(null);
  // State ƒëi·ªÅu khi·ªÉn m·ªü/ƒë√≥ng modal chi ti·∫øt
  const [open, setOpen] = useState(false);
  // State l∆∞u t·ª´ kh√≥a t√¨m ki·∫øm
  const [q, setQ] = useState("");
  // State l·ªçc: th·ªùi gian chu·∫©n b·ªã t·ªëi ƒëa (0 = kh√¥ng l·ªçc)
  const [maxPrep, setMaxPrep] = useState(0);
  // State l·ªçc: th·ªùi gian n·∫•u t·ªëi ƒëa (0 = kh√¥ng l·ªçc)
  const [maxCook, setMaxCook] = useState(0);
  // State l∆∞u s·ªë trang hi·ªán t·∫°i
  const [currentPage, setCurrentPage] = useState(1);
  // üÜï State l∆∞u ti√™u ch√≠ s·∫Øp x·∫øp
  const [sortBy, setSortBy] = useState("");

  // ========== L·ªçc d·ªØ li·ªáu ==========
  // useMemo: ch·ªâ t√≠nh l·∫°i khi items, q, maxPrep, maxCook thay ƒë·ªïi (t·ªëi ∆∞u hi·ªáu nƒÉng)
  const filtered = useMemo(() => {
    const query = q.trim().toLowerCase(); // Chu·∫©n h√≥a t·ª´ kh√≥a t√¨m ki·∫øm
    return items.filter((r) => {
      // Ki·ªÉm tra t√™n ho·∫∑c m√¥ t·∫£ c√≥ ch·ª©a t·ª´ kh√≥a hay kh√¥ng (ho·∫∑c kh√¥ng c√≥ t·ª´ kh√≥a th√¨ lu√¥n ƒë√∫ng)
      const matchesQuery =
        !query ||
        r.title.toLowerCase().includes(query) ||
        r.description.toLowerCase().includes(query);
      // Ki·ªÉm tra th·ªùi gian chu·∫©n b·ªã
      const matchesPrep = !maxPrep || r.prep <= maxPrep;
      // Ki·ªÉm tra th·ªùi gian n·∫•u
      const matchesCook = !maxCook || r.cook <= maxCook;
      // Tr·∫£ v·ªÅ true n·∫øu m√≥n th·ªèa c·∫£ 3 ƒëi·ªÅu ki·ªán
      return matchesQuery && matchesPrep && matchesCook;
    });
  }, [items, q, maxPrep, maxCook]);

  // ========== S·∫Øp x·∫øp d·ªØ li·ªáu ==========
  const sorted = useMemo(() => {
    let sortedData = [...filtered];
    switch (sortBy) {
      case "name-asc":
        sortedData.sort((a, b) => a.title.localeCompare(b.title));
        break;
      case "name-desc":
        sortedData.sort((a, b) => b.title.localeCompare(a.title));
        break;
      case "prep-asc":
        sortedData.sort((a, b) => a.prep - b.prep);
        break;
      case "prep-desc":
        sortedData.sort((a, b) => b.prep - a.prep);
        break;
      case "cook-asc":
        sortedData.sort((a, b) => a.cook - b.cook);
        break;
      case "cook-desc":
        sortedData.sort((a, b) => b.cook - a.cook);
        break;
      default:
        break;
    }
    return sortedData;
  }, [filtered, sortBy]);

  // ========== T√≠nh t·ªïng s·ªë trang ==========
  const totalPages = Math.ceil(sorted.length / pageSize);

  // ========== C·∫Øt d·ªØ li·ªáu theo trang ==========
  const paginated = sorted.slice(
    (currentPage - 1) * pageSize, // v·ªã tr√≠ b·∫Øt ƒë·∫ßu
    currentPage * pageSize        // v·ªã tr√≠ k·∫øt th√∫c
  );

  // ========== H√†m chuy·ªÉn trang ==========
  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  // ========== Khi ƒë·ªïi pageSize th√¨ v·ªÅ trang 1 ==========
  const handlePageSizeChange = (size) => {
    setPageSize(size);
    setCurrentPage(1);
  };

  return (
    <>
      {/* B·ªô l·ªçc + thanh t√¨m ki·∫øm + sort */}
      <Filters
        q={q} setQ={setQ}                 // T·ª´ kh√≥a v√† h√†m c·∫≠p nh·∫≠t
        maxPrep={maxPrep} setMaxPrep={setMaxPrep} // Th·ªùi gian chu·∫©n b·ªã t·ªëi ƒëa
        maxCook={maxCook} setMaxCook={setMaxCook} // Th·ªùi gian n·∫•u t·ªëi ƒëa
        pageSize={pageSize}               // S·ªë m√≥n/trang hi·ªán t·∫°i
        setPageSize={handlePageSizeChange} // H√†m ƒë·ªïi s·ªë m√≥n/trang
        sortBy={sortBy} setSortBy={setSortBy} // üÜï Th√™m s·∫Øp x·∫øp
      />

      {/* Hi·ªÉn th·ªã danh s√°ch m√≥n ƒÉn d·∫°ng l∆∞·ªõi */}
      {/* xs=1: mobile 1 c·ªôt, md=2: tablet 2 c·ªôt, lg=3: desktop 3 c·ªôt */}
      <Row xs={1} md={2} lg={3} className="g-4">
        {paginated.map((r, idx) => (
          <Col key={idx}>
            <RecipeCard
              recipe={r} // d·ªØ li·ªáu m√≥n ƒÉn
              onView={(rec) => { // khi b·∫•m n√∫t xem chi ti·∫øt
                setSelected(rec); // l∆∞u m√≥n ƒë∆∞·ª£c ch·ªçn
                setOpen(true);    // m·ªü modal
              }}
              onAddToFavorites={onAddToFavorites} // th√™m v√†o y√™u th√≠ch
            />
          </Col>
        ))}
      </Row>

      {/* ========== Thanh ph√¢n trang ==========
          Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ nhi·ªÅu h∆°n 1 trang */}
      {totalPages > 1 && (
        <div className="d-flex justify-content-center mt-4">
          <Pagination>
            {/* N√∫t v·ªÅ trang ƒë·∫ßu */}
            <Pagination.First
              onClick={() => handlePageChange(1)}
              disabled={currentPage === 1}
            />
            {/* N√∫t l√πi 1 trang */}
            <Pagination.Prev
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
            />

            {/* Danh s√°ch c√°c s·ªë trang */}
            {Array.from({ length: totalPages }, (_, i) => (
              <Pagination.Item
                key={i + 1}
                active={i + 1 === currentPage} // trang hi·ªán t·∫°i
                onClick={() => handlePageChange(i + 1)}
              >
                {i + 1}
              </Pagination.Item>
            ))}

            {/* N√∫t ti·∫øn 1 trang */}
            <Pagination.Next
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
            />
            {/* N√∫t t·ªõi trang cu·ªëi */}
            <Pagination.Last
              onClick={() => handlePageChange(totalPages)}
              disabled={currentPage === totalPages}
            />
          </Pagination>
        </div>
      )}

      {/* ========== Modal xem chi ti·∫øt m√≥n ƒÉn ========== */}
      <RecipeModal
        show={open}            // true = m·ªü modal
        recipe={selected}      // d·ªØ li·ªáu m√≥n ƒë∆∞·ª£c ch·ªçn
        onAddToCart={() => {   // khi b·∫•m "Add to Cart"
          onAddToCart();       // g·ªçi callback th√™m v√†o gi·ªè
          setOpen(false);      // ƒë√≥ng modal
        }}
        onHide={() => setOpen(false)} // ƒë√≥ng modal khi b·∫•m X ho·∫∑c Cancel
      />
    </>
  );
}
